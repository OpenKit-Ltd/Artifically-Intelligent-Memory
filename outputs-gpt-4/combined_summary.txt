Filename: index
Path: ./supabase/functions/input/index.ts

Code:
```
import { serve } from "http/server.ts";
import { createClient } from "supabase";
import { corsHeaders } from "../cors.ts";
import { handleSensoryInput } from "./database.ts";


serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    // setup supabase at the start of the function
    const supabaseClient = await createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )
    // Now we can get the session or user object
    const {
      data: { user },
    } = await supabaseClient.auth.getUser()

    console.log("user", user)

    const { input, source } = await req.json();
    const response = await handleSensoryInput(supabaseClient, input, source)

    return new Response(JSON.stringify(response), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
    
  } catch (e) {
    return new Response(JSON.stringify({ error: e.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});

// To invoke:
// curl -i --location --request POST 'http://localhost:54321/functions/v1/' \
//   --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
//   --header 'Content-Type: application/json' \
//   --data '{"name":"Functions"}'


```

Explanation:
This file, named index.ts, is a Deno script that imports the serve function from the http/server module, the createClient function from the supabase module, the corsHeaders object from the cors module, and the handleSensoryInput function from the database module. The code sets up an HTTP server using the serve function, which takes an asynchronous callback function as its argument. This callback function handles incoming requests and performs various tasks, such as setting up a Supabase client, retrieving user information, parsing input data, and calling the handleSensoryInput function with the Supabase client, input data, and source data as its arguments. The callback function also handles error cases by returning a JSON response with an error message and a 500 status code. The server is set up to handle CORS by using the corsHeaders object in the response headers. The code interacts with the Supabase API to authenticate users and perform database operations. The main variables used in the code are supabaseClient, user, input, source, and response. To reconstruct this file, follow the provided code and descriptions, ensuring that the imports, function calls, and error handling are implemented correctly.

--------------------------------------------------------------------------------

Filename: database
Path: ./supabase/functions/input/database.ts

Code:
```
import { RecursiveCharacterTextSplitter } from "langchain/text_splitter";
import { OpenAIEmbeddings } from "langchain/embeddings/openai";

const embeddings = new OpenAIEmbeddings({openai_api_key: Deno.env.get('SUPABASE_URL')});



export const insertSensoryInput = async (supabaseClient: any, source: string) => {
  try {
    const { data, error } = await supabaseClient.from('sensory_inputs').insert({ source, creation_date: new Date() });
    if (error) throw error;
    return data[0].input_id;
  } catch (error) {
    console.error(error);
    return -1;
  }
}



export const insertInputChunks = async (supabaseClient: any, inputId: number, chunks: string[])  => {
  try {
    const inputChunks = chunks.map((content, index) => ({
      input_id: inputId,
      content,
      embedding: null, // Replace with the actual embedding vector
      sequence_number: index,
    }));

    const { error } = await supabaseClient.from('input_chunks').insert(inputChunks);
    if (error) throw error;
  } catch (error) {
    console.error(error);
  }
}


export const handleSensoryInput = async (supabaseClient: any, raw_text: string, source: string) => {
    const splitter = new RecursiveCharacterTextSplitter({
        chunkSize: 1000,
        chunkOverlap: 250,
    });

    const output = await splitter.createDocuments([raw_text]);
    const inputId = await insertSensoryInput(supabaseClient, source);
    if (inputId !== -1) {
        await insertInputChunks(supabaseClient, inputId, output);
    }
}
```

Explanation:
This TypeScript file, named 'database.ts', is located in the 'supabase/functions/input' directory. It imports two classes: 'RecursiveCharacterTextSplitter' from the 'langchain/text_splitter' module and 'OpenAIEmbeddings' from the 'langchain/embeddings/openai' module. The code initializes an 'embeddings' instance of the 'OpenAIEmbeddings' class with the 'SUPABASE_URL' environment variable as the 'openai_api_key' parameter. The file defines three functions: 'insertSensoryInput', 'insertInputChunks', and 'handleSensoryInput'. The 'insertSensoryInput' function takes two parameters: 'supabaseClient' (any) and 'source' (string), and returns a Promise<number>. It inserts a new record into the 'sensory_inputs' table and returns the 'input_id' of the inserted record. The 'insertInputChunks' function takes three parameters: 'supabaseClient' (any), 'inputId' (number), and 'chunks' (string[]), and returns a Promise<void>. It maps the 'chunks' array into an array of objects with 'input_id', 'content', 'embedding', and 'sequence_number' properties, and inserts these objects into the 'input_chunks' table. The 'handleSensoryInput' function takes three parameters: 'supabaseClient' (any), 'raw_text' (string), and 'source' (string), and returns a Promise<void>. It creates an instance of the 'RecursiveCharacterTextSplitter' class with a 'chunkSize' of 1000 and a 'chunkOverlap' of 250, and then calls the 'createDocuments' method to split the 'raw_text' into chunks. It then calls the 'insertSensoryInput' and 'insertInputChunks' functions with the appropriate parameters. The code handles errors by logging them to the console and returning appropriate values in case of failure. To reconstruct this file, follow the provided imports, function definitions, and variable declarations, and ensure that the code interacts with the Supabase database and OpenAI Embeddings as described.

--------------------------------------------------------------------------------

Filename: cors
Path: ./supabase/functions/cors.ts

Code:
```
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}
```

Explanation:
The cors.ts file is a TypeScript file located in the supabase/functions directory. It does not have any imports. The file defines and exports a constant object named corsHeaders, which contains two key-value pairs representing CORS headers. The first key is 'Access-Control-Allow-Origin', and its value is '*', allowing any origin to access the resource. The second key is 'Access-Control-Allow-Headers', and its value is a string containing a comma-separated list of allowed headers: 'authorization, x-client-info, apikey, content-type'. There are no function calls, function definitions, or variables in this file. The code does not interact with external APIs, services, or other systems, and there is no error handling or edge case handling. To reconstruct this file, create a TypeScript file named cors.ts in the supabase/functions directory and define the corsHeaders object as described above, then export it.

--------------------------------------------------------------------------------

