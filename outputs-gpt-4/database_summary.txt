This TypeScript file, named 'database.ts', is located in the 'supabase/functions/input' directory. It imports two classes: 'RecursiveCharacterTextSplitter' from the 'langchain/text_splitter' module and 'OpenAIEmbeddings' from the 'langchain/embeddings/openai' module. The code initializes an 'embeddings' instance of the 'OpenAIEmbeddings' class with the 'SUPABASE_URL' environment variable as the 'openai_api_key' parameter. The file defines three functions: 'insertSensoryInput', 'insertInputChunks', and 'handleSensoryInput'. The 'insertSensoryInput' function takes two parameters: 'supabaseClient' (any) and 'source' (string), and returns a Promise<number>. It inserts a new record into the 'sensory_inputs' table and returns the 'input_id' of the inserted record. The 'insertInputChunks' function takes three parameters: 'supabaseClient' (any), 'inputId' (number), and 'chunks' (string[]), and returns a Promise<void>. It maps the 'chunks' array into an array of objects with 'input_id', 'content', 'embedding', and 'sequence_number' properties, and inserts these objects into the 'input_chunks' table. The 'handleSensoryInput' function takes three parameters: 'supabaseClient' (any), 'raw_text' (string), and 'source' (string), and returns a Promise<void>. It creates an instance of the 'RecursiveCharacterTextSplitter' class with a 'chunkSize' of 1000 and a 'chunkOverlap' of 250, and then calls the 'createDocuments' method to split the 'raw_text' into chunks. It then calls the 'insertSensoryInput' and 'insertInputChunks' functions with the appropriate parameters. The code handles errors by logging them to the console and returning appropriate values in case of failure. To reconstruct this file, follow the provided imports, function definitions, and variable declarations, and ensure that the code interacts with the Supabase database and OpenAI Embeddings as described.